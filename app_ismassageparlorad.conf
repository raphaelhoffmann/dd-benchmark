deepdive {

  sampler.sampler_args: "-l 300 -s 1 -i 500 --alpha 0.1 -c 0"

  schema.variables {
    ismassageparlorad.is_true: Boolean
  }

  pipeline.run: "ismassageparlorad"

  pipeline.pipelines {
    #ismassageparlorad = ["extract_ismassageparlorad", "f_ismassageparlorad_features"]
    #ismassageparlorad = ["extract_ismassageparlorad"]
    ismassageparlorad = ["f_ismassageparlorad_features"]
  }

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
    gphost   : ${GPHOST}
    gpport   : ${GPPORT}
    gppath   : ${GPPATH}
    # start gpfdist server on the machine running the application with
    # `rungpcommand 'gpfdist -d /lfs/raiders4/0/rionda/greenplum_gpfdist-memex -p 9999'`
  }

#  inference.parallel_grounding: true # COMMENT OUT unless you set up GP
   calibration.holdout_fraction: 0.075

  extraction.extractors {

    extract_ismassageparlorad {
      style: "plpy_extractor"
      before: psql -d ${DBNAME} -f ${APP_HOME}/schemas/ismassageparlorad.sql
      input: """
        SELECT  doc_id, 
                array_to_string(array_agg(array_to_string(words, ' ') ORDER BY sent_id), ' ') as words
          FROM  sentences_escort
      GROUP BY  doc_id"""
      output_relation: "ismassageparlorad"
      udf: ${APP_HOME}"/udf/extract_ismassageparlorad.py"
      dependencies: []
      parallelism: ${PARALLELISM}
    }
  }

  inference.factors {

    f_ismassageparlorad_features {
      input_query: """
        SELECT  ismassageparlorad.id AS "ismassageparlorad.id",
                ismassageparlorad.is_true AS "ismassageparlorad.is_true",
                unnest(features) AS "ismassageparlorad.feature"
          FROM  ismassageparlorad
         """
      function: "IsTrue(ismassageparlorad.is_true)"
      weight: "?(ismassageparlorad.feature)"
    }
  }
}

